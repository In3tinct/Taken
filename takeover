while true; do
 date;

 #Regions you have instance running on
 #CHANGE HERE space separated region for multiple regions
 for region in us-east-1
  do
  echo "Currently checking - $region"

 #aws-cli request to get all the instances running, running
 
 #CHANGE HERE, this filters the ec2 instances which are "t3a.nano" to stop and restart so we fetch ips
 #Each entry is run as background job for parallelism until the ec2 instance restarts
  for i in $(aws ec2 describe-instances --region "$region" --filters "Name=instance-state-name,Values=running" --filter "Name=instance-type,Values=t3a.nano" --query "Reservations[*].Instances[*].{Instance:InstanceId}" --output json | grep Instance | cut -d '"' -f 4)
  do
    if grep "$i" whitelist_instances; then
        echo "Skipping $i"
    else
    (echo "******************************************"
    echo "Stopping instance Id:$i"
    aws ec2 stop-instances --instance-ids $i --region "$region"

    #Wait for the intance to stop before starting
    aws ec2 wait instance-stopped --instance-ids $i --region "$region"
    echo "Starting Instance"
    aws ec2 start-instances --instance-ids $i --region "$region"

    aws ec2 wait instance-running --instance-ids "$i" --region "$region"
    # It's also good to wait for status checks to pass (takes too long)
    #aws ec2 wait instance-status-ok --instance-ids "$i" --region "$region"
    sleep 5

    newip=`aws ec2 describe-instances --region "$region" --instance-ids $i --query "Reservations[*].Instances[*].{Instance:PublicIpAddress}" --output json | grep Instance | cut -d '"' -f 4`
    
    #Checking if new ip is blank in case of any error (Rarely but may happen that instance didn't start within 1 min. and hence didn't get a new ip)
    if [ -z "$newip" ]
    then
    	continue
    fi
    echo "New IP:$newip"
    echo "$newip" >> ip_changed

    #Escaping dots for exact match
    ip_to_search=$(echo $newip | sed -r 's/\./\\./g')

    #Grepping through our list of subdomains from earlier saved file ip_with_hostname which was created with subdomain-collection script
    ip_with_hostname=$(grep -w $ip_to_search ip_with_hostname)
 
    #If match is found send an email notification
    if [ -n "$ip_with_hostname" ]; then
	echo "Found a match $i"
	echo "$i" "$region" "$ip_with_hostname" >> whitelist_instances
        echo "Subject: Subdomain Take it Over $ip_with_hostname region $region" | ssmtp youremail@gmail.com
    fi ) &
    fi
  done
  wait
 done
done
